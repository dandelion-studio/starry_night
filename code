-- pico-8 starry night
-- relaxing experience
-- by dandelion-studio

-------------------------------
-- title ----------------------
function _title()
 
 cls(0)
 camera(-4,0)--camera to draw center
 mapdraw (16, 0, 0, 0, 16, 16, 0) 
 
 --blades draw------------------
   
   local dt = 1/100
 
   titleblades:update(dt)
   titleblades:draw()

 camera(0,0)--reset camera
 print("starry night",40,97,12)
 print("\135 dandelion-studio",26,112,7)
 print("\137 made by efraitor",26,122,7)


end
-------------------------------	

-------------------------------
-- game -----------------------
function _game()
 
 --load sounds
 if (t < 18150) then
  sfx(00,1) --wind sound
  if(soundtimer >= 240) then
   sfx(01,2) --windmill sound
   soundtimer = 0
  end
  --sfx(02,3) fireflies sound
 end
 
 camera (0, 0) --initialize camera

 -- sky deep night
 cls(0) --clear graphics buffer and set backgroun to black
 -- to refresh screen and erase preview sprite
 
 -- stars
	pal() -- reset palette mapping

 if blink_frame then
	pal(7,10) --change white to yellow
	end
	
 mapdraw (0, 0, 0, 0, 16, 16, 0) 
	
 -- moon
 pal() -- reset palette mapping
 circfill(19,15,12,13) --x,y,rad,col
 spr(75,8,4,3,3)
 
 -- clouds behind mountains
 local x = t / 16 --check the velocity
 x = x % 128
 mapdraw(0, 16, -x, 0, 16, 16, 0)
 mapdraw(0, 16, 128-x, 0, 16, 16, 0)
	
	-- mountains
 mapdraw (0, 32, 0, 0, 16, 16, 0) 
 
 --particles-------------
 particles_draw()

 --fence
 spr(63,64,104)
 spr(63,72,104)
 spr(63,80,104)
 spr(63,112,104)
 spr(63,120,104)

	--land
 mapdraw (0, 48, 0, 0, 16, 16, 0)

 --grass
 spr(12,88,104)
 spr(28,96,104)
 
	--blades draw------------------
   dt = 1/200	
   blades:update(dt)
   blades:draw()

 --sheep-----------------
	sheepobject:draw()
	--animating sheep
 sheepobject:move()
	sheepobject.x += sheepobject.speed
 --sheep jump
 if (sheepobject.x >= 47) and (sheepobject.x <= 59) then
		sheepobject:jump()
	end
	if (sheepobject.x >= 59) and (sheepobject.x <= 71) then
		sheepobject:down()
	end
	--reinitialize speed after jump
 if (sheepobject.x >= 71) then
		sheepobject.speed = 0.4
	end
 
	--increasing sheep number
 if (sheepobject.x > 59) and (sheepobject.x <61) then --sheep inside the screen view
		sheep_number = sheep_number + 1/3 --to controlling the time the sheep expend on move one pixel (revisar)
 end
 
 --get a random number
 if (sheepobject.x >= 128) and (getnumber == true) then --sheep inside the screen view
	 randomselect = flr(rnd(3)) + 1  -- a random integer between 1 and 3
  getnumber = false
 end 
 
 -- create new sheep at a random time
 if (randomselect == 1) then
 	if (sheeptimer >= 60) then
 	 sheepobject.x = -8
 	 sheeptimer = 0
 	 getnumber = true
  end
 end
 
 if (randomselect == 2) then	
 	if (sheeptimer >= 150) then
 	 sheepobject.x = -8
 	 sheeptimer = 0
 	 getnumber = true
  end
 end
 
 if (randomselect == 3) then
 	if (sheeptimer >= 1200) then
 	 sheepobject.x = -8
 	 sheeptimer = 0
 	 getnumber = true
  end
 end
 
 --showing variables for debug
	  --print("timer",32,50,7)
   --print(t,65,50,7)
   --print("sheepnumber",8,60,7)
   --print(sheep_number,65,60,7)
   --print("sheepobject.x",0,70,7)
   --print(sheepobject.x,65,70,7)
   --print("sheeptimer",12,80,7)
   --print(sheeptimer,65,80,7)
   --print("randomselect",3,90,7)
   --print(randomselect,65,90,7)
 ------------------------------ 


end
-------------------------------	

-------------------------------
-- ending ---------------------
function _ending()
 
 --stop sounds on the four channels
 sfx(-1,0)
 sfx(-1,1)
 sfx(-1,2)
 sfx(-1,3)
 
 rectfill(0,0,127,127,0)
 print("how many sheeps jumped?",17,40,12)
 spr(50, 60, 60)
 --wait two seconds
 if (t > 18210) then
 	print("the correct number is: ", 18, 85, 12)
 end
 --wait three seconds 
 if (t > 18300) then
 	print(ceil(sheep_number), 108, 85, 12)
 end
 	
end
-------------------------------	

-------------------------------
--sheep------------------------

sheepclass = {}

 sheepclass.new = function(init)
  init = init
  local self = {} --local variables accesible only within this function
  self.x = init.x 
  self.y = init.y 
  self.sprite = init.sprite 
  self.speed = init.speed
  self.moving = init.moving
  self.move = sheepclass.move
  self.draw = sheepclass.draw
  self.jump = sheepclass.jump
  self.down = sheepclass.down
  return self
 end

	--animating sheep
	sheepclass.move = function(self)
		self.moving = true
		--sprites change every 0.2 seconds
		if(animatimer == 4) then
			self.sprite = 49
		end
		if(animatimer == 8) then
			self.sprite = 48
		end
	end
	
	--sheep jumping
	sheepclass.jump = function(self)
		self.y -= 1
		self.speed = 0.8
		self.sprite = 50
	end
	
	--sheep falling
	sheepclass.down = function(self)
		self.y += 1
		self.speed = 0.8
		self.sprite = 50
	end
	
	sheepclass.draw = function(self,init)
  spr(sheepobject.sprite, sheepobject.x, sheepobject.y)
 end
-------------------------------

-------------------------------
--blades-----------------------
bladeclass = {}

bladeclass.new = function(init)
  init = init
  local self = {} --local variables accesible only within this function
  self.x = init.x 
  self.y = init.y 
  self.size = init.size 
  self.rot = init.rot
  self.update = bladeclass.update
  self.draw = bladeclass.draw
  return self
end

bladeclass.update = function(self,dt)
  self.rot = self.rot + dt
end

bladeclass.draw = function(self,init)
  local r=flr(self.rot*20)/16
  --flr = get the next lower integer
  -- 16 =  number of divisions of 360 degrees
  local s=sin(r)
  local c=cos(r)
  local b=s*s+c*c
  local size = self.size/2
  local w = sqrt(size^2*2)
  
  --we get the area of sprites to draw
  for y=-w,w do
    for x=-w,w do
      local ox=( s*y+c*x)/b+size
      local oy=(-s*x+c*y)/b+size
      local col=sget(ox,oy)
      --if color is not black (for transparency)
      if col == 4 then 
        --set the pixels we get one by one in the coordinates below
       pset(self.x+x,self.y+y,col)
      end
    end 
  end
end
-------------------------------	


-------------------------------
--fireflies--------------------

particles = {}

function particles_init()
 --number of particles
 for i=1,8 do --initial particles
  add(particles, particle_new(rnd(128), rnd(32)+80, rnd(10)+20))
 end
end

function particle_new(x, y, energy)
 return {
  pos_x   = x,
  pos_y   = y,
  nrg     = energy,
  dcy     = 1/energy,
  color   = 10
 }
end

function particles_update(frame)
  --number of particles
  for i=1,8 do --particles in screen after initials disapear
  particle = particles[i]
  particle.nrg -= 1
  if particle.nrg > 0 then
   particle.color = calc_color(particle.nrg * particle.dcy)
  else
   particles[i] = particle_new(rnd(128), rnd(32)+80, rnd(10)+20)
  end
 end
end

function calc_color(life)
 if life > 0.3 then
  return 10
 elseif life > 0.2 then
  return 7
 elseif life > 0.1 then
  return 5
 else
  return 1
 end
end

function particles_draw()
 for particle in all(particles) do
  pset(particle.pos_x, particle.pos_y, particle.color)
 end
end

-------------------------------


-------------------------------
--main-------------------------

function _init()

	t = 0 --game counter (every 30 it's one second)	
 blink_frame = false
 starst = 0
 
 soundtimer = 0
 
	--sheep variables
	animatimer = 0
 sheeptimer = 0
 randomselec = 0
 getnumber = true
 sheep_number = 0	
		
	--create blades
 blades = bladeclass.new({
   x=100, --position of the blades
   y=68,
   size=72,
   rot=1 --init rotation (1= 0 dregrees,0.25 = 90 degrees, 0.5 = 180 degrees, 0.75 = 270 degrees)
 })
    
 --create blades
 titleblades = bladeclass.new({
   x=60, --position of the blades
   y=36,
   size=72,
   rot=1 --init rotation (1= 0 dregrees,0.25 = 90 degrees, 0.5 = 180 degrees, 0.75 = 270 degrees)
 })
    
  --create sheep
 sheepobject = sheepclass.new({
   x = -8, -- sprites x position
	  y = 104, -- sprites y position
	  sprite = 48, -- sprite starting frame
	  speed = 0.4, -- sprite speed
	  moving = false
	})
	
	--particles
	particles_init()
    
end
 

function _update()

 starst=(starst+1) % 4  --to divide by fps
 blink_frame = (starst == 0)
 
 soundtimer += 1

 t = t+1 -- counter increasing 30/second
 
 --sheep----------------------
  --increase timer for respawn
 if (sheepobject.x >= 128) then --sheep inside the screen view
		sheeptimer = sheeptimer + 1
 end
 
  --increase animation timer and reset it
 animatimer += 1
 if (animatimer > 8) then
 	animatimer = 0
 end--animating sheep
 
 --particles
 particles_update()
 
end
 
 

function _draw()

--title------------------------
 if (t<150) then
  _title()
 end
 
--game-------------------------
 if (t>=150) and (t < 18150) then
  _game()
 end

--ending----------------------- 
 if (t >= 18150) then  
  _ending()
 end

--reboot-game------------------ 
 --wait five seconds after ending and reset game
 if (t >= 18450) then

 	t=0
 	
  soundtimer = 0
 
	 --sheep variables
	 animatimer = 0
  sheeptimer = 0
  randomselec = 0
  getnumber = true
  sheep_number = 0	
  sheepobject.x = -8
  sheepobject.y = 104
 
 end
 
end

-------------------------------
